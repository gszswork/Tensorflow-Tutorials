# -*- coding: utf-8 -*-
"""movie reviews.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VqQk2FcPgRrs65BqROqhWsBvJgUAfVpQ

根据文字影评分析影评的主观性（积极/消极）——二元分类
"""

from __future__ import absolute_import, division, print_function, unicode_literals

import tensorflow as tf
from tensorflow import keras

import numpy as np

print(tf.__version__)

# 下载IMDB数据集
# 数据集已经预处理，单词序列被转化为整数序列，其中每个整数表示字典中的特定单词。

imdb = keras.datasets.imdb
# imdb.load(num_words) num_words参数保留了训练数据中最常见的10,000个单词。
(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000)

# 数据的格式
print("Train entries: {}, labels: {}".format(len(train_data), len(train_labels)))

print(train_data[0])

"""既然数据集已经预处理转化为数字，怎么查看数字对应的文本内容呢？"""

# 将整数转换为数字

# 一个映射单词到整数索引的词典
word_index = imdb.get_word_index()

# 保留第一个索引
word_index = {k:(v+3) for k,v in word_index.items()}
word_index["<PAD>"] = 0
word_index["<START>"] = 1
word_index["<UNK>"] = 2  # unknown
word_index["<UNUSED>"] = 3

reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])

# decode function: input int string return word string.
def decode_review(text):
    return ' '.join([reverse_word_index.get(i, '?') for i in text])

decode_review(train_data[2])

"""# 准备数据 （再次预处理） 
之前保存的整数数组，在输入神经网络之前必须转换为tensor,tutorial中提供两种方式：


*   类似one-hot的向量，长度为10,000, 除了包含对应单词的位置为1，其余都为0。这个方法需要大量的内存，矩阵大小 10,000 * num_reviews
*   填充数组，保证输入数据有相同的长度，创建一个大小为max_length * num_reviews 的整型张量。
"""

# 采用填充数组
train_data = keras.preprocessing.sequence.pad_sequences(train_data,
                                                        value=word_index["<PAD>"],
                                                        padding='post',
                                                        maxlen=256)

test_data = keras.preprocessing.sequence.pad_sequences(test_data,
                                                       value=word_index["<PAD>"],
                                                       padding='post',
                                                       maxlen=256)

print()

# 采用pad_seuqences 让我产生了一个疑问：
# Q:填充之后的数组，不同instance同一列的数字是否还代表着同一个单词？

# A:首先回答是否定的，不同instance同一列的数字不再代表同一个单词，但是：
# 与one-hot编码不同，one-hot编码是生成all_words 长度的数组，只有0和
# 表示对应的位置有没有，但pad_squences将一个长度为num_samples的2D矩
# 阵转化为(num_samples, maxlen)，且是Numpy，举例：
sequence = [[1],[2,3],[4,5,6]]
tf.keras.preprocessing.sequence.pad_sequences(sequence)

"""# 构建模型
1. Embedding: 该层采用整数编码的词汇表，查找每个词汇索引的Embedding vector，这些向量是通过模型训练学习得到的。向量向输出数组增加了一个维度，的到的维度为：(batch, sequence,embedding),这里的embedding=16.
2. GlobalAveragePooling1: 通过对序列维度求平均值来为每个样本返回一个fixed-length输出向量。 This allows the model to handle input of variable length, in the simplest way possible.
3. 然后将fixed-length output vector输入到两层全连接网络中。


# 但是Embedding是怎么用的？我还是不太懂。但是Embedding是怎么用的？
"""

# 输入形状不用于训练，用于电影评论的词汇数目
vocab_size = 10000

model = keras.Sequential()
model.add(keras.layers.Embedding(vocab_size, 16))
model.add(keras.layers.GlobalAveragePooling1D())
model.add(keras.layers.Dense(16, activation='relu'))
model.add(keras.layers.Dense(1, activation='sigmoid'))

model.summary()

# 选择损失函数，优化器

model.compile(optimizer='adam', 
              loss='binary_crossentropy',
              metrics=['accuracy'])

"""# 验证集

在训练时，我们想要检查模型在从未见过的数据上的准确率，因此从原始训练数据中分离出10，000个样本来创建一个验证集。

Q：为什么要有验证集？直接从测试集进行测试，训练集进行训练不可以吗？

A：验证集要满足两件事：1.帮助训练模型 2. 不参与训练。验证集的目标只是使用训练数据来开发和调整模型。
比如，我根据不同参数训练出不同的模型，根据验证集来选出了准确率最高的参数设计。然后再用这个模型去测试（个人理解）。
"""

# 创建一个验证集
x_val = train_data[:10000]
partial_x_train = train_data[10000:]

y_val = train_labels[:10000]
partial_y_train = train_labels[10000:]

# example for train_data[:10000]
list = [1,2,3,4,5,6,7,8,9,0]
list1 = list[5:]
list2 = list[:5]

print(list1,list2)

"""# 训练模型

以512个样本的mini-batch大小迭代40个epoch来训练模型。
"""

# parameters:
#   train_data :去除验证集的部分
#   train_label :去除验证集的部分
#   epochs
#   batch_size: mini-batch
#   validataion data: 验证集，上一步刚生成出来
#   verbose: 显示格式
train = model.fit(partial_x_train,
                  partial_y_train,
                  epochs=40,
                  batch_size=512,
                  validation_data=(x_val,y_val),
                  verbose=1
)

"""# 评估模型
res = model.evaluate(test_data,test_label, verbose=2)

res包含loss 和 accuracy.
"""

res = model.evaluate(test_data, test_labels, verbose=2)
print(res)

"""# 创建一个accuracy和loss随时间(epochs)变化的图表
model.fit函数返回了一个history对象，（命名为train），该对象包含一个字典，其中包含训练阶段所发生的一切事件：
"""

history_dict = train.history
history_dict.keys()

import matplotlib.pyplot as plt

acc = history_dict['accuracy']
val_acc = history_dict['val_accuracy']
loss = history_dict['loss']
val_loss = history_dict['val_loss']

epochs = range(1, len(acc)+1)

# “bo”代表 "蓝点"
plt.plot(epochs, loss, 'bo', label='Training loss')
# b代表“蓝色实线”
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

plt.show()

plt.plot(epochs, acc, 'bo', label='Training acc')
plt.plot(epochs, val_acc, 'b', label='Validation acc')
plt.title('Training and validation accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()

plt.show()

"""# Summary:
单从问题来看，这是一个很简单的二分类问题，特别的地方主要在于交叉验证调用，以及embedding method.
"""